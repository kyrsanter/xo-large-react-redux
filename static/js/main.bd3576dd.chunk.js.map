{"version":3,"sources":["reducer/main-reducer.js","reducer/index.js","store.js","components/form/form.js","components/form/index.js","actions/index.js","components/square/square.js","components/square/index.js","components/row/row.js","components/row/index.js","components/side-bar/side-bar.js","components/row-container/row-container.js","components/row-container/index.js","components/popup/popup.js","components/app/app.js","components/app/index.js","index.js"],"names":["initialState","squares","showPopup","start","selectedSquare","neighbour","players","first","id","active","sign","color","name","scores","second","rows","reducer","state","action","type","payload","sign_1","name_1","color_1","sign_2","name_2","color_2","fullReducer","combineReducers","form","formReducer","store","createStore","Form","handleSubmit","this","props","className","onSubmit","htmlFor","Field","component","React","Component","reduxForm","getRows","rowsArr","getClickedSquare","squareObj","Square","squareHandle","JSON","parse","stringify","rowId","match","neededSquare","filter","squaresInRow","sq","onGetClickedSquare","onShowPopup","onClick","style","borderTop","sides","borderBottom","borderLeft","borderRight","inner","connect","dispatch","square","Row","map","key","onGetRows","arr","SideBar","firstPlayer","secondPlayer","RowContainer","buildRows","cloneObj","reversedRows","obj","squaresCounter","squaresInTriangle","rowsCounter","i","push","length","full","j","closed","linesCounter","left","right","top","bottom","row","Popup","buildButtons","setObj","btnsArr","side","btn","hadleClick","lookingForNeighbour","relat","neededSq","onFirstPlayerPutSign","onSecondPlayerPutSign","firstActive","regExp","Number","sqId","sidesCounter","ongUpdateClickedSquare","onMakeFirstActive","onMakeSecondActive","onHidePopup","currentColor","—ÅurrentSign","selSq","alert","buildNewRows","onUpdateRows","newRows","rowIdN","sqIdN","buttons","updateRows","App","initPlayers","values","undefined","onPlayersGetted","Fragment","started","playersDataObj","getPlayers","app","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.bd3576dd.chunk.js","sourcesContent":["let initialState = {\r\n    squares: 264,\r\n    showPopup: false,\r\n    start: false,\r\n    selectedSquare: null,\r\n    neighbour: null,\r\n    players: {\r\n        first: {\r\n            id: 1,\r\n            active: false,\r\n            sign: null,\r\n            color: null,\r\n            name: null,\r\n            scores: 0,\r\n        },\r\n        second: {\r\n            id: 2,\r\n            active: false,\r\n            sign: null,\r\n            color: null,\r\n            name: null,\r\n            scores: 0,\r\n        }\r\n    },\r\n    rows: [\r\n        //id num\r\n        // squaresCounter num\r\n        // squaresInRow [{\r\n            // id,\r\n        // }]\r\n    ]\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'GET_PLAYERS':\r\n            let {payload} = action;\r\n            return {\r\n                ...state,\r\n                start: true,\r\n                players: {\r\n                    first: {\r\n                        ...state.players.first,\r\n                        active: true,\r\n                        sign: payload.sign_1,\r\n                        name: payload.name_1,\r\n                        color: payload.color_1,\r\n                    },\r\n                    second: {\r\n                        ...state.players.second,\r\n                        sign: payload.sign_2,\r\n                        name: payload.name_2,\r\n                        color: payload.color_2,\r\n                    }\r\n                }\r\n            };\r\n            break;\r\n        case 'GET_ROWS':\r\n            return {\r\n                ...state,\r\n                rows: [...action.payload]\r\n            };\r\n            break;\r\n        case 'GET_CLICKED_SQUARE':\r\n            return {\r\n                ...state,\r\n                selectedSquare: action.payload,\r\n            };\r\n            break;\r\n        case 'MAKE_FIRST_ACTIVE':\r\n            return {\r\n                ...state,\r\n                players: {\r\n                    first: {\r\n                        ...state.players.first,\r\n                        active: true\r\n                    },\r\n                    second: {\r\n                        ...state.players.second,\r\n                        active: false\r\n                    }\r\n                }\r\n            };\r\n            break;\r\n        case 'MAKE_SECOND_ACTIVE':\r\n            return {\r\n                ...state,\r\n                players: {\r\n                    first: {\r\n                        ...state.players.first,\r\n                        active: false\r\n                    },\r\n                    second: {\r\n                        ...state.players.second,\r\n                        active: true\r\n                    }\r\n                }\r\n            };\r\n            break;\r\n        case 'HIDE_POPUP':\r\n            return {\r\n                ...state,\r\n                showPopup: false,\r\n            };\r\n            break;\r\n        case 'SHOW_POPUP':\r\n            return {\r\n                ...state,\r\n                showPopup: true,\r\n            };\r\n            break;\r\n        case 'UPDATE_ROWS':\r\n            return {\r\n                ...state,\r\n                rows: action.payload\r\n            };\r\n        case 'FIRST_PLAYER_PUT_SIGN':\r\n            return {\r\n                ...state,\r\n                players: {\r\n                    ...state.players,\r\n                    first: {\r\n                        ...state.players.first,\r\n                        scores: state.players.first.scores + 1,\r\n                    }\r\n                }\r\n            };\r\n        case 'SECOND_PLAYER_PUT_SIGN':\r\n            return {\r\n                ...state,\r\n                players: {\r\n                    ...state.players,\r\n                    second: {\r\n                        ...state.players.second,\r\n                        scores: state.players.second.scores + 1,\r\n                    }\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import reducer from './main-reducer';\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport {combineReducers} from \"redux\";\r\n\r\nlet fullReducer = combineReducers({\r\n    form: formReducer,\r\n    reducer\r\n});\r\n\r\nexport default fullReducer;\r\n","import fullReducer from \"./reducer\";\r\nimport {createStore} from 'redux';\r\nlet store = createStore(fullReducer);\r\nexport default store;","import React from 'react';\r\nimport {reduxForm, Field} from 'redux-form';\r\n\r\nclass Form extends React.Component {\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let {handleSubmit} = this.props;\r\n        return (\r\n            <section className=\"form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12\">\r\n                            <form onSubmit={handleSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <h3>First player</h3>\r\n                                            <label htmlFor=\"name_1\">Name</label>\r\n                                            <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"name_1\" name=\"name_1\"/>\r\n                                            <label htmlFor=\"sign_1\">Sign</label>\r\n                                            <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"sign_1\" name=\"sign_1\"/>\r\n                                            <label htmlFor=\"color_1\">Color</label>\r\n                                            <Field component=\"input\" type=\"color\" className=\"form-control\" id=\"color_1\" name=\"color_1\"/>\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            <h3>Second player</h3>\r\n                                            <label htmlFor=\"name_2\">Name</label>\r\n                                            <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"name_2\" name=\"name_2\"/>\r\n                                            <label htmlFor=\"sign_2\">Sign</label>\r\n                                            <Field component=\"input\" type=\"text\" className=\"form-control\" id=\"sign_2\" name=\"sign_2\"/>\r\n                                            <label htmlFor=\"color_2\">Color</label>\r\n                                            <Field component=\"input\" type=\"color\" className=\"form-control\" id=\"color_2\" name=\"color_2\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row justify-content-center mt-2\">\r\n                                        <button className=\"btn btn-primary\">Lets go</button>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default reduxForm({form: 'init'})(Form);\r\n","import Form from './form';\r\nexport default Form;","const getPlayers = (playersDataObj) => {\r\n    return {\r\n        type: 'GET_PLAYERS',\r\n        payload: playersDataObj\r\n    }\r\n};\r\n\r\nconst getRows = (rowsArr) => {\r\n    return {\r\n        type: 'GET_ROWS',\r\n        payload: rowsArr\r\n    }\r\n};\r\n\r\nconst getClickedSquare = (squareObj) => {\r\n    return {\r\n        type: 'GET_CLICKED_SQUARE',\r\n        payload: squareObj,\r\n    }\r\n};\r\n\r\nconst makeFirstActive = () => {\r\n    return {\r\n        type: 'MAKE_FIRST_ACTIVE'\r\n    }\r\n};\r\n\r\nconst makeSecondActive = () => {\r\n    return {\r\n        type: 'MAKE_SECOND_ACTIVE'\r\n    }\r\n};\r\n\r\n\r\nconst hidePopup = () => {\r\n    return {\r\n        type: 'HIDE_POPUP'\r\n    }\r\n};\r\n\r\nconst showPopup = () => {\r\n    return {\r\n        type: 'SHOW_POPUP'\r\n    }\r\n};\r\n\r\nconst updateRows = (arr) => {\r\n    return {\r\n        type: 'UPDATE_ROWS',\r\n        payload: arr,\r\n    }\r\n};\r\n\r\nconst firstPlayerPutSign = () => {\r\n    return {\r\n        type: 'FIRST_PLAYER_PUT_SIGN'\r\n    }\r\n}\r\n\r\nconst secondPlayerPutSign = () => {\r\n    return {\r\n        type: 'SECOND_PLAYER_PUT_SIGN'\r\n    }\r\n}\r\n\r\nexport {\r\n    getPlayers,\r\n    getRows,\r\n    getClickedSquare,\r\n    makeFirstActive,\r\n    makeSecondActive,\r\n    hidePopup,\r\n    showPopup,\r\n    updateRows,\r\n    firstPlayerPutSign,\r\n    secondPlayerPutSign\r\n}","import React from 'react';\r\nimport './square.css';\r\nimport {connect} from 'react-redux';\r\nimport {getClickedSquare, showPopup} from '../../actions'\r\nimport store from '../../store'\r\n\r\nclass Square extends React.Component {\r\n\r\n    squareHandle = (id) => {\r\n        let regexp = /([0-9]*)_([0-9]*)/;\r\n        let rows = JSON.parse(JSON.stringify(this.props.rows));\r\n        let rowId = id.match(regexp)[1];\r\n        let neededRow = rows.filter( ({id}) => id == rowId);\r\n        let neededSquare = neededRow[0].squaresInRow.filter( sq => sq.id == id );\r\n        this.props.onGetClickedSquare(neededSquare[0]);\r\n        this.props.onShowPopup();\r\n    };\r\n\r\n\r\n    render() {\r\n        let {id, sq} = this.props;\r\n        return (\r\n            <div className=\"square\"\r\n                onClick={() => this.squareHandle(id)}\r\n                style={\r\n                    {\r\n                        borderTop: sq.sides['top'] ? `1px solid ${sq.sides['top']}` : `1px solid #33333350`,\r\n                        borderBottom: sq.sides['bottom'] ? `1px solid ${sq.sides['bottom']}` : `1px solid #33333350`,\r\n                        borderLeft: sq.sides['left'] ? `1px solid ${sq.sides['left']}` : `1px solid #33333350`,\r\n                        borderRight: sq.sides['right'] ? `1px solid ${sq.sides['right']}` : `1px solid #33333350`\r\n                    }\r\n                }\r\n            >\r\n                {sq.inner}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        rows: state.reducer.rows,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetClickedSquare: (square) => {\r\n            return dispatch(getClickedSquare(square))\r\n        },\r\n        onShowPopup: () => {\r\n            return dispatch(showPopup())\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Square);","import Square from \"./square\";\r\nexport default Square;","import React from 'react';\r\nimport store from \"../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getRows} from \"../../actions\";\r\nimport './row.css';\r\nimport Square from \"../square\";\r\n\r\n\r\nclass Row extends React.Component {\r\n    render() {\r\n        let {rows, id} = this.props;\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                {\r\n                    rows[id].squaresInRow.map( sq => {\r\n                        return <Square key={sq.id} id={sq.id} sq={sq}/>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        rows: state.reducer.rows,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetRows: (arr) => {\r\n            return dispatch(getRows(arr))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Row);","import Row from './row';\r\nexport default Row;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './side-bar.css';\r\n\r\nclass SideBar extends React.Component {\r\n\r\n    render() {\r\n        let {firstPlayer, secondPlayer} = this.props;\r\n        return (\r\n            <aside>\r\n                <p style={{\r\n                    color: firstPlayer.active ? firstPlayer.color : secondPlayer.color,\r\n                }}>Current player: {firstPlayer.active ? firstPlayer.name : secondPlayer.name}</p>\r\n                <div className=\"scores\">\r\n                    <p>{firstPlayer.name} : {firstPlayer.scores}</p>\r\n                    <p>{secondPlayer.name} : {secondPlayer.scores}</p>\r\n                </div>\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        firstPlayer: state.reducer.players.first,\r\n        secondPlayer: state.reducer.players.second,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(SideBar);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Row from \"../row\";\r\nimport {getRows} from \"../../actions\";\r\nimport SideBar from \"../side-bar/side-bar\";\r\n\r\nclass RowContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.buildRows()\r\n    }\r\n\r\n    buildRows = () => {\r\n        let rows = [];\r\n        let reversedRows = [];\r\n        let obj = {\r\n            id: null,\r\n            squaresCounter: null,\r\n            squaresInRow: [],\r\n        };\r\n        let cloneObj;\r\n        let {squares} = this.props;\r\n        let squaresInTriangle = squares / 2;\r\n        let rowsCounter = 0;\r\n        for (let i = 2; i < squaresInTriangle; i = i + 2) {\r\n            rowsCounter = rowsCounter + i;\r\n            if (rowsCounter <= squaresInTriangle) {\r\n                cloneObj = JSON.parse(JSON.stringify(obj));\r\n                cloneObj.squaresCounter = i;\r\n                cloneObj.id = i / 2;\r\n                rows.push(cloneObj)\r\n             }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        for (let i = rows.length - 1; i >= 0; i--) {\r\n            reversedRows.push(rows[i])\r\n        }\r\n        let full = [...rows, ...reversedRows];\r\n        for(let i = 0; i < full.length; i++) {\r\n            full[i] = {...full[i], id:i};\r\n            for(let j = 0; j < full[i].squaresCounter; j++) {\r\n                let squareObj = {\r\n                    id: null,\r\n                    closed: false,\r\n                    inner: null,\r\n                    linesCounter: 0,\r\n                    sides: {\r\n                        left: null,\r\n                        right: null,\r\n                        top: null,\r\n                        bottom: null,\r\n                    }\r\n                };\r\n                squareObj = {...squareObj, id: `${i}_${j}`};\r\n                if (j === 0) {\r\n                    if (i < full.length / 2 - 1) {\r\n                        delete squareObj.sides.left;\r\n                        delete squareObj.sides.top;\r\n                    }\r\n                    else if (i == full.length / 2 - 1) {\r\n                        delete squareObj.sides.left;\r\n                        delete squareObj.sides.top;\r\n                    }\r\n                    else if (i > full.length / 2 - 1) {\r\n                        delete squareObj.sides.left;\r\n                        delete squareObj.sides.bottom;\r\n                    }\r\n                }\r\n                else if (j === full[i].squaresCounter - 1) {\r\n                    if (i < full.length / 2 - 1) {\r\n                        delete squareObj.sides.right;\r\n                        delete squareObj.sides.top;\r\n                    }\r\n                    else if (i == full.length / 2 - 1) {\r\n                        delete squareObj.sides.right;\r\n                        delete squareObj.sides.top;\r\n                    }\r\n                    else if (i > full.length / 2 - 1) {\r\n                        delete squareObj.sides.right;\r\n                        delete squareObj.sides.bottom;\r\n                    }\r\n                }\r\n                full[i].squaresInRow = [...full[i].squaresInRow, squareObj]\r\n            }\r\n        }\r\n        this.props.onGetRows(full);\r\n    };\r\n\r\n    render() {\r\n        let {rows} = this.props;\r\n        return (\r\n            <section className=\"game-row\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8\">\r\n                            {\r\n                                rows.map( (row) => {\r\n                                    return <Row key={row.id} id={row.id}/>\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-lg-4\">\r\n                            <SideBar />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        squares: state.reducer.squares,\r\n        rows: state.reducer.rows,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetRows: (rowsArr) => {\r\n            return dispatch(getRows(rowsArr))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RowContainer)","import RowContainer from './row-container';\r\nexport default RowContainer;","import React from 'react';\r\nimport './popup.css';\r\nimport store from '../../store'\r\nimport {\r\n    firstPlayerPutSign,\r\n    secondPlayerPutSign,\r\n    getClickedSquare,\r\n    hidePopup,\r\n    makeFirstActive,\r\n    makeSecondActive,\r\n    updateRows\r\n} from '../../actions'\r\nimport {connect} from 'react-redux';\r\n\r\nclass Popup extends React.Component {\r\n\r\n    buildButtons = () => {\r\n        let setObj = this.props.selectedSquare.sides;\r\n        let btnsArr = [];\r\n        for(let side in setObj) {\r\n            let btn;\r\n            switch (side) {\r\n                case 'top':\r\n                    btn = (\r\n                        <button key={side} style={{\r\n                            borderTop: setObj[side] ? `10px solid ${setObj[side]}` : `10px solid white`\r\n                        }} className=\"popup-button\"\r\n                        onClick={()=> this.hadleClick(side)}>\r\n\r\n                        </button>\r\n                    );\r\n                    btnsArr.push(btn);\r\n                    break;\r\n                case 'right':\r\n                    btn = (\r\n                        <button key={side} style={{\r\n                            borderRight: setObj[side] ? `10px solid ${setObj[side]}` : `10px solid white`\r\n                        }} className=\"popup-button\"\r\n                        onClick={()=> this.hadleClick(side)}>\r\n\r\n                        </button>\r\n                    );\r\n                    btnsArr.push(btn);\r\n                    break;\r\n                case 'bottom':\r\n                    btn = (\r\n                        <button key={side} style={{\r\n                            borderBottom: setObj[side] ? `10px solid ${setObj[side]}` : `10px solid white`\r\n                        }} className=\"popup-button\"\r\n                        onClick={()=> this.hadleClick(side)}>\r\n\r\n                        </button>\r\n                    );\r\n                    btnsArr.push(btn);\r\n                    break;\r\n                case 'left':\r\n                    btn = (\r\n                        <button key={side} style={{\r\n                            borderLeft: setObj[side] ? `10px solid ${setObj[side]}` : `10px solid white`\r\n                        }} className=\"popup-button\"\r\n                        onClick={()=> this.hadleClick(side)}>\r\n\r\n                        </button>\r\n                    );\r\n                    btnsArr.push(btn);\r\n                    break;\r\n            }\r\n        }\r\n        return btnsArr;\r\n    };\r\n\r\n    lookingForNeighbour = (relat, side, color) => {\r\n        let {onFirstPlayerPutSign, onSecondPlayerPutSign, firstPlayer, secondPlayer} = this.props;\r\n        let firstActive = firstPlayer.active;\r\n        let neededSq;\r\n        let rows = this.props.rows;\r\n        let regExp = /([0-9]*)_([0-9]*)/;\r\n        let rowId = Number(relat.id.match(regExp)[1]);\r\n        let sqId = Number(relat.id.match(regExp)[2]);\r\n        let sidesCounter = 0;\r\n        debugger;\r\n        switch (side) {\r\n            case 'top':\r\n                if (rowId === 0) {\r\n                    return;\r\n                }\r\n                else if (rowId < rows.length / 2 - 1) {\r\n                    sqId = sqId - 1;\r\n                }\r\n                else if (rowId === rows.length / 2 - 1) {\r\n                    sqId = sqId - 1;\r\n                }\r\n                else if (rowId === rows.length / 2) {\r\n                    sqId = sqId;\r\n                }\r\n                else if (rowId >  rows.length / 2 - 1) {\r\n                    sqId = sqId + 1;\r\n                }\r\n\r\n                rowId = rowId - 1;\r\n                neededSq = rows[rowId].squaresInRow[sqId];\r\n                for(let side in neededSq.sides) {\r\n                    if (neededSq.sides[side]) {\r\n                        sidesCounter = sidesCounter + 1;\r\n                    }\r\n                }\r\n                if (sidesCounter === relat.linesCounter) {\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign();\r\n                    }\r\n                }\r\n                return {\r\n                    ...neededSq,\r\n                    inner: sidesCounter - 1 === relat.linesCounter ? relat.inner : null,\r\n                    linesCounter: neededSq.linesCounter + 1,\r\n                    sides: {\r\n                        ...neededSq.sides,\r\n                        bottom: color,\r\n                    }\r\n                };\r\n                break;\r\n            case 'bottom':\r\n                if (rowId === rows.length - 1) {\r\n                    return;\r\n                }\r\n                else if (rowId < rows.length / 2 - 1) {\r\n                    sqId = sqId + 1;\r\n                }\r\n                else if (rowId === rows.length / 2 - 1) {\r\n                    sqId = sqId;\r\n                }\r\n                else if (rowId >  rows.length / 2 - 1) {\r\n                    sqId = sqId - 1;\r\n                }\r\n                rowId = rowId + 1;\r\n                neededSq = rows[rowId].squaresInRow[sqId];\r\n                for(let side in neededSq.sides) {\r\n                    if (neededSq.sides[side]) {\r\n                        sidesCounter = sidesCounter + 1;\r\n                    }\r\n                }\r\n                if (sidesCounter === relat.linesCounter) {\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign();\r\n                    }\r\n                }\r\n                return {\r\n                    ...neededSq,\r\n                    inner: sidesCounter === relat.linesCounter ? relat.inner : null,\r\n                    linesCounter: neededSq.linesCounter + 1,\r\n                    sides: {\r\n                        ...neededSq.sides,\r\n                        top: color,\r\n                    }\r\n                };\r\n\r\n                break;\r\n            case 'left':\r\n                if (sqId === 0) {\r\n                    return;\r\n                }\r\n                sqId = sqId - 1;\r\n                neededSq = rows[rowId].squaresInRow[sqId];\r\n                for(let side in neededSq.sides) {\r\n                    if (neededSq.sides[side]) {\r\n                        sidesCounter = sidesCounter + 1;\r\n                    }\r\n                }\r\n                if (sidesCounter === relat.linesCounter) {\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign();\r\n                    }\r\n                }\r\n                return {\r\n                    ...neededSq,\r\n                    inner: sidesCounter === relat.linesCounter ? relat.inner : null,\r\n                    linesCounter: neededSq.linesCounter + 1,\r\n                    sides: {\r\n                        ...neededSq.sides,\r\n                        right: color,\r\n                    }\r\n                };\r\n\r\n                break;\r\n            case 'right':\r\n                if (sqId == rows[rowId].squaresInRow.length - 1) {\r\n                    return;\r\n                }\r\n                sqId = sqId + 1;\r\n                neededSq = rows[rowId].squaresInRow[sqId];\r\n                for(let side in neededSq.sides) {\r\n                    if (neededSq.sides[side]) {\r\n                        sidesCounter = sidesCounter + 1;\r\n                    }\r\n                }\r\n                if (sidesCounter === relat.linesCounter) {\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign();\r\n                    }\r\n                }\r\n                return {\r\n                    ...neededSq,\r\n                    inner: sidesCounter === relat.linesCounter ? relat.inner : null,\r\n                    linesCounter: neededSq.linesCounter + 1,\r\n                    sides: {\r\n                        ...neededSq.sides,\r\n                        left: color,\r\n                    }\r\n                };\r\n                break;\r\n        }\r\n    };\r\n\r\n    hadleClick = (side) => {\r\n        let {firstPlayer,\r\n            secondPlayer,\r\n            onFirstPlayerPutSign,\r\n            onSecondPlayerPutSign,\r\n            selectedSquare,\r\n            ongUpdateClickedSquare,\r\n            onMakeFirstActive,\r\n            onMakeSecondActive,\r\n            onHidePopup} = this.props;\r\n        let currentColor = firstPlayer.active ? firstPlayer.color : secondPlayer.color;\r\n        let —ÅurrentSign = firstPlayer.active ? firstPlayer.sign : secondPlayer.sign;\r\n        let firstActive = firstPlayer.active;\r\n        let neighbour;\r\n        let sidesCounter = 0;\r\n        let selSq = {\r\n            ...selectedSquare,\r\n            sides: {\r\n                ...selectedSquare.sides,\r\n            }\r\n        };\r\n        debugger;\r\n        switch (side) {\r\n            case 'top':\r\n                if (selectedSquare.sides[side]) {\r\n                    alert('this side has been already choose');\r\n                    onHidePopup();\r\n                    return;\r\n                }\r\n                selSq = {\r\n                    ...selectedSquare,\r\n                    linesCounter: selectedSquare.linesCounter + 1,\r\n                    sides: {\r\n                        ...selectedSquare.sides,\r\n                        top: currentColor,\r\n                    }\r\n                };\r\n                for(let side in selSq.sides) {\r\n                    sidesCounter = sidesCounter + 1;\r\n                }\r\n                if (sidesCounter === selSq.linesCounter) {\r\n                    selSq.closed = true;\r\n                    selSq.inner = —ÅurrentSign;\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                        onMakeFirstActive()\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign()\r\n                        onMakeSecondActive()\r\n                    }\r\n                }\r\n                break;\r\n            case 'right':\r\n                if (selectedSquare.sides[side]) {\r\n                    alert('this side has been already choose');\r\n                    onHidePopup();\r\n                    return;\r\n                }\r\n                selSq = {\r\n                    ...selectedSquare,\r\n                    linesCounter: selectedSquare.linesCounter + 1,\r\n                    sides: {\r\n                        ...selectedSquare.sides,\r\n                        right: currentColor,\r\n                    }\r\n                };\r\n                for(let side in selSq.sides) {\r\n                    sidesCounter = sidesCounter + 1;\r\n                }\r\n                if (sidesCounter === selSq.linesCounter) {\r\n                    selSq.closed = true;\r\n                    selSq.inner = —ÅurrentSign;\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                        onMakeFirstActive()\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign();\r\n                        onMakeSecondActive()\r\n                    }\r\n                }\r\n                break;\r\n            case 'bottom':\r\n                if (selectedSquare.sides[side]) {\r\n                    alert('this side has been already choose');\r\n                    onHidePopup();\r\n                    return;\r\n                }\r\n                selSq = {\r\n                    ...selectedSquare,\r\n                    linesCounter: selectedSquare.linesCounter + 1,\r\n                    sides: {\r\n                        ...selectedSquare.sides,\r\n                        bottom: currentColor,\r\n                    }\r\n                };\r\n                for(let side in selSq.sides) {\r\n                    sidesCounter = sidesCounter + 1;\r\n                }\r\n                if (sidesCounter === selSq.linesCounter) {\r\n                    selSq.closed = true;\r\n                    selSq.inner = —ÅurrentSign;\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                        onMakeFirstActive();\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign();\r\n                        onMakeSecondActive();\r\n                    }\r\n                }\r\n                break;\r\n            case 'left':\r\n                if (selectedSquare.sides[side]) {\r\n                    alert('this side has been already choose');\r\n                    onHidePopup();\r\n                    return;\r\n                }\r\n                selSq = {\r\n                    ...selectedSquare,\r\n                    linesCounter: selectedSquare.linesCounter + 1,\r\n                    sides: {\r\n                        ...selectedSquare.sides,\r\n                        left: currentColor,\r\n                    }\r\n                };\r\n                for(let side in selSq.sides) {\r\n                    sidesCounter = sidesCounter + 1;\r\n                }\r\n                if (sidesCounter === selSq.linesCounter) {\r\n                    selSq.closed = true;\r\n                    selSq.inner = —ÅurrentSign;\r\n                    if (firstActive) {\r\n                        onFirstPlayerPutSign();\r\n                        onMakeFirstActive()\r\n                    }\r\n                    else {\r\n                        onSecondPlayerPutSign();\r\n                        onMakeSecondActive()\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n        neighbour = this.lookingForNeighbour(selSq, side, currentColor);\r\n        if (!selSq.closed) {\r\n            if (firstActive) {\r\n                onMakeSecondActive();\r\n            }\r\n            else {\r\n                onMakeFirstActive();\r\n            }\r\n        }\r\n        ongUpdateClickedSquare(selSq);\r\n        this.buildNewRows(neighbour, selSq);\r\n        onHidePopup();\r\n    };\r\n\r\n    buildNewRows = (neighbour, selSq) => {\r\n        let {rows, onUpdateRows} = this.props;\r\n        let newRows = JSON.parse(JSON.stringify(rows));\r\n        let regExp = /([0-9]*)_([0-9]*)/;\r\n        let rowId = Number(selSq.id.match(regExp)[1]);\r\n        let sqId = Number(selSq.id.match(regExp)[2]);\r\n        let rowIdN = Number(neighbour.id.match(regExp)[1]);\r\n        let sqIdN = Number(neighbour.id.match(regExp)[2]);\r\n        newRows[rowId].squaresInRow[sqId] = selSq;\r\n        newRows[rowIdN].squaresInRow[sqIdN] = neighbour;\r\n        onUpdateRows(newRows);\r\n    };\r\n\r\n    render() {\r\n        let buttons = this.buildButtons();\r\n        return (\r\n            <section className=\"popup\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col d-flex justify-content-center align-items-center w100 h100\">\r\n                            <div className=\"buttons-wrapper\">\r\n                                {\r\n                                    [...buttons]\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        rows: state.reducer.rows,\r\n        selectedSquare: state.reducer.selectedSquare,\r\n        firstPlayer: state.reducer.players.first,\r\n        secondPlayer: state.reducer.players.second,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        ongUpdateClickedSquare: (sq) => {\r\n            return dispatch(getClickedSquare(sq))\r\n        },\r\n        onMakeFirstActive: () => {\r\n            return dispatch(makeFirstActive())\r\n        },\r\n        onMakeSecondActive: () => {\r\n            return dispatch(makeSecondActive())\r\n        },\r\n        onHidePopup: () => {\r\n            return dispatch(hidePopup())\r\n        },\r\n        onUpdateRows: (arr) => {\r\n            return dispatch(updateRows(arr))\r\n        },\r\n        onFirstPlayerPutSign: () => {\r\n            return dispatch(firstPlayerPutSign())\r\n        },\r\n        onSecondPlayerPutSign: () => {\r\n            return dispatch(secondPlayerPutSign())\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Popup);","import React from 'react';\r\nimport Form from \"../form\";\r\nimport {connect} from 'react-redux'\r\nimport {getPlayers} from \"../../actions\";\r\nimport RowContainer from \"../row-container\";\r\nimport Popup from \"../popup/popup\";\r\nimport store from '../../store';\r\n\r\nclass App extends React.Component {\r\n    initPlayers = (values) => {\r\n        debugger\r\n        if (values.name_1 == undefined || values.name_2 == undefined || values.color_1 == undefined || values.color_2 == undefined || values.sign_1 == undefined || values.sign_2 == undefined) {\r\n            alert('The form or some fields are ampty ');\r\n            return;\r\n        }\r\n        this.props.onPlayersGetted(values);\r\n    };\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    this.props.started ? <RowContainer /> : <Form onSubmit={this.initPlayers}/>\r\n                }\r\n                {\r\n                    this.props.showPopup ? <Popup /> : null\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        started: state.reducer.start,\r\n        showPopup: state.reducer.showPopup\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onPlayersGetted: (playersDataObj) => {\r\n            return dispatch(getPlayers(playersDataObj))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import App from './app'\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport App from './components/app';\n\n\nlet app = (\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(app, document.querySelector('#root'));\n"],"sourceRoot":""}